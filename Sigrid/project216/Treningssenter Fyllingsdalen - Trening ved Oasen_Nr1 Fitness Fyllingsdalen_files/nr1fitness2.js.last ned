jQuery(document).ready(function () {
    $('li.active').parents('li').addClass('active');
    /*
     * Replace all SVG images with inline SVG
     */
    jQuery('.icon img').each(function () {
        var $img = jQuery(this);
        var imgID = $img.attr('id');
        var imgClass = $img.attr('class');
        var imgURL = $img.attr('src');

        jQuery.get(imgURL, function (data) {
            // Get the SVG tag, ignore the rest
            var $svg = jQuery(data).find('svg');

            // Add replaced image's ID to the new SVG
            if (typeof imgID !== 'undefined') {
                $svg = $svg.attr('id', imgID);
            }
            // Add replaced image's classes to the new SVG
            if (typeof imgClass !== 'undefined') {
                $svg = $svg.attr('class', imgClass + ' replaced-svg');
            }

            // Remove any invalid XML tags as per http://validator.w3.org
            $svg = $svg.removeAttr('xmlns:a');

            // Check if the viewport is set, if the viewport is not set the SVG wont't scale.
            if (!$svg.attr('viewBox') && $svg.attr('height') && $svg.attr('width')) {
                $svg.attr('viewBox', '0 0 ' + $svg.attr('height') + ' ' + $svg.attr('width'))
            }

            // Replace image with new SVG
            $img.replaceWith($svg);

        }, 'xml');

    });

    jQuery('.slider').owlCarousel({
        items: (jQuery(".slider .item").length > 1) ? true : false,
        loop: (jQuery(".slider .item").length > 1) ? true : false,
        margin: 0,
        autoplay: true,
        nav: (jQuery(".slider .item").length > 1) ? true : false,
        dots: false,
		mouseDrag:(jQuery(".slider .item").length > 1) ? true : false,
    });

    jQuery('.search-box .button-search').click(function (event) {
        event.preventDefault();
        jQuery(this).next(".input-box").slideToggle();
    });

    jQuery('h3.subnav-toggle').on('click touchstart', function(event) {
        event.preventDefault();
        jQuery(this).next("ul.sub").slideToggle();
    });

    jQuery('.formValidator').each(function (index, element) {
        jQuery(this).bootstrapValidator({
            message: 'This value is not valid',
            excluded: ':disabled',
            fields: {
                name: {
                    validators: {
                        notEmpty: {
                            message: 'The name is required'
                        }
                    }
                },
                practice: {
                    validators: {
                        notEmpty: {
                            message: 'This field is required'
                        }
                    }
                },
                firma: {
                    validators: {
                        notEmpty: {
                            message: 'This field is required'
                        }
                    }
                },
                email: {
                    validators: {
                        notEmpty: {
                            message: 'The email address is required and can\'t be empty'
                        },
                        emailAddress: {
                            message: 'The input is not a valid email address'
                        }
                    }
                },
                phone: {
                    validators: {
                        notEmpty: {
                            message: 'The number is required'
                        },
                        stringLength: {
                            min: 8,
                            max: 8,
                            message: 'The number must be 8 characters only'
                        },
                        regexp: {
                            regexp: /^[0-9]+$/,
                            message: 'The number can only consist of numeric'
                        }
                    }
                }
            }
        });
    });

    equalheight('.equalheight');

});

jQuery(window).load(function () {
    equalheight('.equalheight');
});


jQuery(window).resize(function () {
    equalheight('.equalheight');
});


equalheight = function (container) {
    if (jQuery(window).width() > 767) {

        var currentTallest = 0,
            currentRowStart = 0,
            rowDivs = new Array(),
            jQueryel,
            topPosition = 0;
        jQuery(container).each(function () {

            jQueryel = jQuery(this);
            jQuery(jQueryel).height('auto')
            topPostion = jQueryel.position().top;

            if (currentRowStart != topPostion) {
                for (currentDiv = 0; currentDiv < rowDivs.length; currentDiv++) {
                    rowDivs[currentDiv].innerHeight(currentTallest);
                }
                rowDivs.length = 0; // empty the array
                currentRowStart = topPostion;
                currentTallest = jQueryel.innerHeight();
                rowDivs.push(jQueryel);
            } else {
                rowDivs.push(jQueryel);
                currentTallest = (currentTallest < jQueryel.innerHeight()) ? (jQueryel.innerHeight()) : (currentTallest);
            }
            for (currentDiv = 0; currentDiv < rowDivs.length; currentDiv++) {
                rowDivs[currentDiv].innerHeight(currentTallest);
            }
        });

    } else {
        jQuery('.equalheight').height('auto')
    }

}



jQuery(window).load(function(){

    // quick search regex

    jQuery('.toggle-block').on('click', function(event){
        event.preventDefault();
        jQuery('.toggle-block-item').slideToggle();
    });

    var qsRegex;
    var buttonFilter;

    jQuery('.main-category').change(function() {
        var $boxes = jQuery(this).parent('li').find('.sub-category');
        if(jQuery(this).is(":checked")) {
            $boxes.prop('checked', true);
        } else { 
            $boxes.prop('checked', false);
        }
        $boxes.trigger("change");
    });

    // change is-checked class on buttons
    jQuery('.button-group').each(function(i, buttonGroup) {
        var jQuerybuttonGroup = jQuery(buttonGroup);
    });

    // init Isotope
    var $container = jQuery('.search_listing');

    $container.isotope({
        itemSelector: '.list-group-item-wrapper',
        layoutMode: 'fitRows',
    });

    // filter with selects and checkboxes
    var $checkboxes = $('#filters .sub-item input');

    $checkboxes.change( function() {
        // map input values to an array
        var inclusives = [];
        // inclusive filters from checkboxes
        $checkboxes.each( function( i, elem ) {
            // if checkbox, use value if checked
            if ( elem.checked ) {
                inclusives.push( elem.value );
            }
        });
        // combine inclusive filters
        var filterValue = inclusives.length ? inclusives.join(', ') : '*';
        $container.isotope({ filter: filterValue });
    });

    // use value of search field to filter
    var $quicksearch = $('.quicksearch').keyup(debounce(function() {
        qsRegex = new RegExp($quicksearch.val(), 'gi');
        if ($(".quicksearch").val()) {
            var searchResults = function() {
                return qsRegex ? $(this).text().match(qsRegex) : true;
            };
            $container.isotope({
            filter: searchResults
            });
        } else {
            $container.isotope({
            filter: filterValue
        });
        }
    }));

});
// debounce so filtering doesn't happen every millisecond
function debounce(fn, threshold) {
    var timeout;
    return function debounced() {
        if (timeout) {
            clearTimeout(timeout);
        }
        function delayed() {
            fn();
            timeout = null;
        }
        setTimeout(delayed, threshold || 100);
    };
}
